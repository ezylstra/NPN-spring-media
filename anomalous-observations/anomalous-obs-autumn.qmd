---
title: "Anomalous autumn observations"
date: "`r format(Sys.time(), '%d %B, %Y')`"
engine: knitr
execute:
  echo: false
  error: false
  warning: false
  message: false
format:
  html:
    page-layout: full
    fig-cap-location: top
    embed-resources: false
editor: visual
---

```{css echo=FALSE}
figure.quarto-float div.leaflet-control {
  text-align: left;
}
```

------------------------------------------------------------------------

```{r}
#| label: parameters
#| include: false

library(rnpn)
library(dplyr)
library(lubridate)
library(stringr)
library(glue)
library(ggplot2)
library(scales) 
library(sf)
library(terra)
library(tidyterra)
library(elevatr)
library(leaflet)
library(kableExtra)

# Current year
year <- 2025

# Prior years
prior_years <- 2009:(year - 1)

# Define early observations (below X percentile)
lowerq <- 0.05

# Logical indicating whether to denote Tukey outliers in addition to early 
# observations (those below X percentile) in histograms
outliers <- FALSE

# Set minimum number of years and observations needed in prior years to 
# evaluate whether a current observation is anomalous
min_yrs <- 8
min_obs <- 20

# Set radius (in km) defining region within which to extract prior observations
# for comparison
radius <- 100

# Set elevational buffer (in m) defining band within which to extract prior
# observations for comparison
elev_buffer <- 1000

# Select phenophases we're interested in
phenophases <- npn_phenophases() %>% 
  filter(phenophase_category == "Leaves") %>%
  data.frame() 
phenophase_ids <- c(498, 471)
  # 498: Colored leaves
  # 471: Falling leaves

# Set mapping parameters ------------------------------------------------------#

# Set date to extract AGDD anomalies (for map). If we don't want today, then set
# agdd_date to desired date.
agdd_today <- TRUE
if (!agdd_today) {
  agdd_date <- ymd("2025-09-01")
} else {
  agdd_date <- today()
}

# Define breaks that will be used to delineate areas cooler/warmer than 30-year
# normals. Breaks = AGDD anomolies on agdd_date.
agdd_breaks <- c(-4000, -250, 250, 4000)

# Colors for map (blue = cooler, offwhite = normal, orange = warmer)
cw_cols <- c("#6fa8d6", "#f7f0da", "#fa824d")
# plot(1:3, rep(1, 3), pch = 19, cex = 5, col = cols)
```

```{r}
#| label: phenophase details
#| include: false

php498 <- "colored leaves"
php471 <- "falling leaves"

include_498 <- ifelse(498 %in% phenophase_ids, TRUE, FALSE)
include_471 <- ifelse(471 %in% phenophase_ids, TRUE, FALSE)

# Create text describing which phenophase classes are included in the report
for (i in 1:length(phenophase_ids)) {
  php <- phenophase_ids[i]
  if (i == 1) {
    ctext <- paste0(get(paste0("php", php)), " (phenophase ", php, ")")
  } else {
    text_add <- paste0(get(paste0("php", php)), " (", php, ")")
    ctext <- paste0(ctext, " and ", text_add)
  }
}

# Create a dataframe with mapping parameters for each phenophase class
php_df <- data.frame(
  id = phenophase_ids,
  title = str_to_sentence(unlist(mget(paste0("php", phenophase_ids)))))
php_df$col <- ifelse(php_df$id == 498, "yellow", "purple")
```

```{r}
#| label: import state boundaries
#| include: false

# File location
states_shp <- "shapefiles/us_states.shp"

# If file exists, load it. Otherwise download it first.
if (!file.exists(states_shp)) {
  library(rnaturalearth)
  states <- rnaturalearth::ne_states(country = "united states of america", 
                                     returnclass = "sv")
  states <- states[, "postal"]
} else {
  states <- terra::vect(states_shp)
}
```

```{r}
#| label: load existing data
#| include: false
#| eval: true

current <- read.csv("current_autumn_20250930.csv")
prior <- read.csv("prior_autumn_20250930.csv")
```

```{r}
#| label: current data
#| include: false
#| eval: false

current_dl <- npn_download_individual_phenometrics(
  request_source = 'erinz',
  years = year,
  phenophase_ids = phenophase_ids,
  period_start = "07-01",
  period_end = "12-31",
  additional_fields = c("observed_status_conflict_flag",
                        "species_functional_type")
)

# Simplify data (remove unnecessary columns)
current <- current_dl %>%
  select(site_id, latitude, longitude, elevation_in_meters, state,
         common_name, species_id, species_functional_type, individual_id,
         phenophase_id, phenophase_description, first_yes_year, first_yes_doy,
         numdays_since_prior_no, observed_status_conflict_flag) %>%
  rename(lat = latitude,
         lon = longitude,
         elev = elevation_in_meters,
         func_type = species_functional_type,
         id = individual_id,
         phenophase = phenophase_description,
         year = first_yes_year,
         first_yes = first_yes_doy,
         prior_no = numdays_since_prior_no,
         flag = observed_status_conflict_flag) %>%
  mutate(state = ifelse(state == "", NA, state)) %>%
  data.frame()

# Remove observations of 'ohi'a lehua, if present
current <- current %>%
  filter(common_name != "'ohi'a lehua")

# Remove observations with conflicts or those without a prior no in last 30 days
# (PRIOR NO RESTRICTION REMOVES LOTS OF OBSERVATIONS [21%] - REVISIT THIS)
current <- current %>%
  filter(is.na(flag)) %>%
  filter(!is.na(prior_no)) %>%
  filter(prior_no <= 30) %>%
  select(-flag)

# Keep only first observation of individual for a phenophase in current year
current <- current %>%
  arrange(id, phenophase, first_yes) %>%
  distinct(id, phenophase, .keep_all = TRUE)

# Some observations missing state ID. Will fill in using states layer from the
# tigris package
states48 <- state.abb[! state.abb %in% c("AK", "HI")]
state_fill <- filter(current, is.na(state)) %>%
  select(site_id, lon, lat) %>%
  distinct()
state_fillv <- vect(state_fill, crs = "epsg:4326")
state_new <- terra::extract(states, state_fillv)
state_fill <- cbind(state_fill, state_new = state_new$postal)
current <- current %>%
  left_join(select(state_fill, site_id, state_new), by = "site_id") %>%
  mutate(state = ifelse(!is.na(state), state, state_new)) %>%
  select(-state_new) %>%
  # Restrict observations to the continental US
  filter(state %in% states48)

# Known issues with elevation data. Will repopulate field using values obtained 
# from the elevatr package
elev_fill <- current %>%
  distinct(site_id, lat, lon) %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326)
elev_fill <- get_elev_point(locations = elev_fill, src = "epqs")
elev_fill <- data.frame(elev_fill) %>%
  mutate(elev_new = round(elevation)) %>%
  select(site_id, elev_new)
current <- current %>%
  left_join(elev_fill, by = "site_id") %>%
  select(-elev) %>%
  rename(elev = elev_new)
```

```{r}
#| label: prior data
#| include: false
#| eval: false

for (php in phenophase_ids) {
  spp <- unique(current$species_id[current$phenophase_id == php])
  for (yr in prior_years) {
    dl_temp <- npn_download_individual_phenometrics(
      request_source = 'erinz',
      years = yr,
      species_ids = spp,
      phenophase_ids = php,
      period_start = "07-01",
      period_end = "12-31",
      additional_fields = c("observed_status_conflict_flag",
                            "species_functional_type")
    ) 
    if (nrow(dl_temp) == 0) {
      next
    } else {
      dl_temp <- dl_temp %>%
        mutate(observed_status_conflict_flag = 
                 as.character(observed_status_conflict_flag))
    }
    if (!exists("dl_temp_all")) {
      dl_temp_all <- dl_temp
    } else {
      dl_temp_all <- rbind(dl_temp_all, dl_temp)
    }
  }
  if (php == phenophase_ids[1]) {
    prior_dl <- dl_temp_all
  } else {
    prior_dl <- rbind(prior_dl, dl_temp_all)
  }
  rm(dl_temp, dl_temp_all)
}

# Simplify data (remove unnecessary columns; replace -9999 with NA)
prior <- prior_dl %>%
  select(site_id, latitude, longitude, elevation_in_meters, state,
         common_name, species_id, species_functional_type, individual_id,
         phenophase_id, phenophase_description, first_yes_year, first_yes_doy,
         numdays_since_prior_no, observed_status_conflict_flag) %>%
  rename(lat = latitude,
         lon = longitude,
         elev = elevation_in_meters,
         func_type = species_functional_type,
         id = individual_id,
         phenophase = phenophase_description,
         year = first_yes_year,
         first_yes = first_yes_doy,
         prior_no = numdays_since_prior_no,
         flag = observed_status_conflict_flag) %>%
  mutate(state = ifelse(state == "", NA, state)) %>%
  data.frame()

# Remove observations with conflicts or those without a prior no in last 30 days
prior <- prior %>%
  filter(is.na(flag)) %>%
  filter(!is.na(prior_no)) %>%
  filter(prior_no <= 30) %>%
  select(-flag)

# Keep only first observation of individual for a phenophase in a year
prior <- prior %>%
  arrange(id, phenophase, year, first_yes) %>%
  distinct(id, phenophase, year, .keep_all = TRUE)

# Fill in state where needed
state_fill <- filter(prior, is.na(state)) %>%
  select(site_id, lon, lat) %>%
  distinct()
state_fillv <- vect(state_fill, crs = "epsg:4326")
state_new <- terra::extract(states, state_fillv)
state_fill <- cbind(state_fill, state_new = state_new$postal)
prior <- prior %>%
  left_join(select(state_fill, site_id, state_new), by = "site_id") %>%
  mutate(state = ifelse(!is.na(state), state, state_new)) %>%
  select(-state_new) %>%
  # Restrict observations to the continental US
  filter(state %in% states48)

# Recreate elevation data
elev_fill <- prior %>%
  distinct(site_id, lat, lon) %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326)
elev_fill <- get_elev_point(locations = elev_fill, src = "epqs")
elev_fill <- data.frame(elev_fill) %>%
  mutate(elev_new = round(elevation)) %>%
  select(site_id, elev_new)
prior <- prior %>%
  left_join(elev_fill, by = "site_id") %>%
  select(-elev) %>%
  rename(elev = elev_new)
```

```{r}
#| label: data processing
#| include: false

# Compare current year observations with distribution of first observation dates
# for plants within xx km and xx m elevation ----------------------------------#

current$n_obs_r <- NA
current$n_indiv_r <- NA
current$n_yrs_r <- NA

for (i in 1:nrow(current)) {
  
  current1 <- current[i, ]
  
  # Get locations for all observations of that species, phenophase
  locs <- prior %>%
    filter(common_name == current1$common_name, 
           phenophase == current1$phenophase) %>%
    select(site_id, lat, lon) %>%
    distinct()
  
  # Calculate distance between current-year plant and all others
  if (nrow(locs) == 0) {next}
  dists <- terra::distance(x = as.matrix(current1[,c("lon", "lat")]),
                           y = as.matrix(locs[,c("lon", "lat")]), 
                           lonlat = TRUE,
                           unit = "km")
  locs_r <- locs[which(dists <= radius), ] %>%
    mutate(withinr = 1)
  
  # Extract prior observations within radius and elevational band
  prior_r <- prior %>%
    left_join(select(locs_r, site_id, withinr), by = "site_id") %>%
    filter(withinr == 1) %>%
    filter(common_name == current1$common_name) %>%
    filter(phenophase == current1$phenophase) %>%
    filter(elev > (current1$elev - elev_buffer) & elev < (current1$elev + elev_buffer))
  
  # Add sample size info (for region defined by loc, elev) to current dataframe
  current$n_obs_r[i] <- nrow(prior_r)
  current$n_indiv_r[i] <- n_distinct(prior_r$id)
  current$n_yrs_r[i] <- n_distinct(prior_r$year)
  
  if (current$n_obs_r[i] < min_obs | current$n_yrs_r[i] < min_yrs) {next}
  
  # Create dataframe with distributional summaries from prior years for 
  # current-year observations that have sufficient data in prior years 
  quants_temp <- data.frame(indiv = paste0(current1$common_name, "_", current1$id), 
                            common_name = current1$common_name,
                            site_id = current1$site_id,
                            lon = current1$lon,
                            lat = current1$lat, 
                            state = current1$state,
                            id = current1$id, 
                            phenophase_id = current1$phenophase_id,
                            phenophase = current1$phenophase,
                            first_yes = current1$first_yes,
                            min = min(prior_r$first_yes),
                            qearly = quantile(prior_r$first_yes, lowerq),
                            q0.25 = quantile(prior_r$first_yes, 0.25),
                            q0.75 = quantile(prior_r$first_yes, 0.75),
                            IQR = IQR(prior_r$first_yes)) %>%
    mutate(whisker = q0.25 - 1.5 * IQR,
           outlier_threshold = ifelse(whisker < min, min, whisker),
           early = ifelse(first_yes < qearly, 1, 0),
           outlier = ifelse(first_yes <= outlier_threshold, 1, 0))
  
  if (exists("quants_r")) {
    quants_r <- rbind(quants_r, quants_temp)
  } else {
    quants_r <- quants_temp
  }
  
  if (quants_temp$early == 1 | quants_temp$outlier == 1) {
    # Create prior dataframe for ggplot
    prior_temp <- prior_r %>%
      select(common_name, func_type, phenophase_id, phenophase, site_id, lat, 
             lon, elev, state, year, first_yes) %>%
      mutate(indiv = quants_temp$indiv) %>%
      mutate(panel = paste0(indiv, " (", quants_temp$state, ")"))
      
    if (exists("prior_plot_r")) {
      prior_plot_r <- rbind(prior_plot_r, prior_temp)
    } else {
      prior_plot_r <- prior_temp
    }
  }
}  

# Extract just early/outlier observations
quants_r_eo <- quants_r %>%
  filter(early == 1 | outlier == 1) %>%
  select(indiv, common_name, state, site_id, phenophase_id, phenophase,
         first_yes, min, qearly, q0.25, q0.75, early, outlier) %>%
  mutate(panel =  paste0(indiv, " (", state, ")"),
         eo = ifelse(outlier == 1, "Outlier", "Early"),
         eo = factor(eo, levels = c("Early", "Outlier")))

# Loop through phenophases and create ggplot objects with histograms
# Each panel represents distribution associated with one current-year observation
for (php in phenophase_ids) {
  
  quants_r_p <- filter(quants_r_eo,  phenophase_id == php)
  prior_plot_r_p <- filter(prior_plot_r, phenophase_id == php)

  php_name <- paste0(phenophases$phenophase_name[phenophases$phenophase_id == php], 
                     ", first observation of the year")
  
  plot_temp <- prior_plot_r_p %>%
    ggplot(aes(x = first_yes)) +
    geom_histogram(bins = 60, fill = "steelblue3") +
    facet_wrap(~panel, scales = "free_y", ncol = 2) +
    scale_y_continuous(breaks = scales::breaks_extended(Q = c(1, 5, 2, 4, 3)))
  
  if (outliers) {
    plot_temp <- plot_temp +
      geom_vline(data = quants_r_p,
                 aes(xintercept = first_yes, linetype = eo),
                 color = "red") +
      scale_linetype_manual(values = c("dashed", "solid")) +
      labs(x = "Day of year", y = "Count", title = php_name,
           linetype = paste0(year, " observations")) +
      theme_bw() +
      theme(legend.position = "bottom")
  } else {
    plot_temp <- plot_temp +
      geom_vline(data = quants_r_p, aes(xintercept = first_yes), 
                 color = "red") +
      labs(x = "Day of year", y = "Count", title = php_name) +
      theme_bw()
  }
  
  # Save ggplot objects with name = plot_r_phenophase (eg, plot_r_498)
  assign(paste0("plot_r_", php), plot_temp)
}

# Create table with early and outlier observations for all phenophase classes
current_join <- current %>%
  mutate(indiv = paste0(common_name, "_", id)) %>%
  select(common_name, indiv, id, phenophase_id, phenophase, lat, lon, elev, 
         func_type, n_obs_r, n_yrs_r)

eo_table <- quants_r_eo %>%
  select(indiv, state, phenophase_id, first_yes, min, early, outlier) %>%
  left_join(current_join, by = c("indiv", "phenophase_id")) %>%
  mutate(early = ifelse(early == 1, "Yes", "No"),
         outlier = ifelse(outlier == 1, "Yes", "No"), 
         earliest = ifelse(first_yes <= min, "Yes", "No"),
         firstyes = parse_date_time(x = paste(year, first_yes), 
                                    orders = "yj")) %>%
  mutate(func_type2 = case_when(
    func_type == "Deciduous broadleaf" ~ "DB",
    func_type == "Drought deciduous broadleaf" ~ "DDB",
    func_type == "Semi-evergreen broadleaf" ~ "SEB",
    .default = NA
  )) %>%
  select(common_name, phenophase_id, phenophase, func_type, id, state, lat, lon, 
         elev, first_yes, firstyes, early, earliest, outlier, n_yrs_r, n_obs_r) %>%
  arrange(phenophase_id, func_type, common_name, state, first_yes) %>%
  select(-first_yes)
```

We identified observations of plant phenophases in Nature's Notebook (NN) that were earlier than normal in the second half of `{r} year`. We compared `{r} year` observations with observations collected in `{r} min(prior_years)`-`{r} max(prior_years)` for plants within `{r} radius` km and within `{r} elev_buffer` m elevation of the plant observed in `{r} year`. We limited analyses to `{r} length(phenophase_ids)` phenophases: `{r} ctext`, and only evaluated whether an observation was early if there were at least `{r} min_obs` observations for that species and phenophase over `{r} min_yrs` or more years between `{r} min(prior_years)` and `{r} max(prior_years)`. We only considered observations that were made on or after day 180 in each year.

We classified a `{r} year` observation as ***early*** if it was earlier than `{r} (1 - lowerq) * 100`% of first-of-season observations in `{r} min(prior_years)`-`{r} max(prior_years)`, and as an ***outlier*** if it was a Tukey outlier (`{r} year` observation earlier than Q1 - 1.5 \* IQR). We also noted if the observation was as early or earlier than the earliest date ever recorded in NN for that species, phenophase, and region (***earliest***).

In the tables below, we list all of the `{r} year` observations that were considered early or an outlier by phenophase and species or state. Tables that list each anomalous individual and histograms displaying distributions of observations in prior years that were used to assess `{r} year` potential anomalies are at the bottom of the document.

```{r}
#| label: tbl-colored-leaves-spp
#| include: !expr include_498
#| tbl-cap: !expr glue::glue("Anomalous observations of colored leaves, by species. Mean no. observations and years list the mean number of {min(prior_years)}-{max(prior_years)} observations (or associated number of years) that were used to determine whether a {year} observation of an individual plant was anomalous or not.")

eo_cl_spp <- eo_table %>%
  filter(phenophase == "Colored leaves") %>%
  group_by(common_name) %>%
  summarize(n_early = sum(early == "Yes"),
            n_earliest = sum(earliest == "Yes"),
            n_outlier = sum(outlier == "Yes"),
            mn_n_yrs = round(mean(n_yrs_r)),
            mn_n_obs = round(mean(n_obs_r)),
            .groups = "keep") %>%
  kbl(col.names = c("Species", "No. early", "No. earliest", "No. outliers",
                    "Mean no. years", "Mean no. observations"),
      align = c("l", rep("c", 5))) %>%
  kable_styling(full_width = FALSE, font_size = 11)
eo_cl_spp
```

```{r}
#| label: tbl-falling-leaves-spp
#| include: !expr include_471
#| tbl-cap: !expr glue::glue("Anomalous observations of falling leaves, by species. Mean no. observations and years list the mean number of {min(prior_years)}-{max(prior_years)} observations (or associated number of years) that were used to determine whether a {year} observation of an individual plant was anomalous or not.")

eo_fl_spp <- eo_table %>%
  filter(phenophase == "Falling leaves") %>%
  group_by(common_name) %>%
  summarize(n_early = sum(early == "Yes"),
            n_earliest = sum(earliest == "Yes"),
            n_outlier = sum(outlier == "Yes"),
            mn_n_yrs = round(mean(n_yrs_r)),
            mn_n_obs = round(mean(n_obs_r)),
            .groups = "keep") %>%
  kbl(col.names = c("Species", "No. early", "No. earliest", "No. outliers",
                    "Mean no. years", "Mean no. observations"),
      align = c("l", rep("c", 5))) %>%
  kable_styling(full_width = FALSE, font_size = 11)
eo_fl_spp
```

```{r}
#| label: tbl-colored-leaves-state
#| include: !expr include_498
#| tbl-cap: !expr glue::glue("Anomalous observations of colored leaves, by state. Mean no. observations and years list the mean number of {min(prior_years)}-{max(prior_years)} observations (or associated number of years) that were used to determine whether a {year} observation of an individual plant was anomalous or not.")

eo_cl_state <- eo_table %>%
  filter(phenophase == "Colored leaves") %>%
  group_by(state) %>%
  summarize(n_species = n_distinct(common_name),
            n_early = sum(early == "Yes"),
            n_earliest = sum(earliest == "Yes"),
            n_outlier = sum(outlier == "Yes"),
            mn_n_yrs = round(mean(n_yrs_r)),
            mn_n_obs = round(mean(n_obs_r)),
            .groups = "keep") %>%
  kbl(col.names = c("State", "No. species", "No. early", "No. earliest", 
                    "No. outliers", "Mean no. years", "Mean no. observations"),
      align = c("l", rep("c", 5))) %>%
  kable_styling(full_width = FALSE, font_size = 11)
eo_cl_state
```

```{r}
#| label: tbl-falling-leaves-state
#| include: !expr include_471
#| tbl-cap: !expr glue::glue("Anomalous observations of falling leaves, by state. Mean no. observations and years list the mean number of {min(prior_years)}-{max(prior_years)} observations (or associated number of years) that were used to determine whether a {year} observation of an individual plant was anomalous or not.")

eo_fl_state <- eo_table %>%
  filter(phenophase == "Falling leaves") %>%
  group_by(state) %>%
  summarize(n_species = n_distinct(common_name),
            n_early = sum(early == "Yes"),
            n_earliest = sum(earliest == "Yes"),
            n_outlier = sum(outlier == "Yes"),
            mn_n_yrs = round(mean(n_yrs_r)),
            mn_n_obs = round(mean(n_obs_r)),
            .groups = "keep") %>%
  kbl(col.names = c("State", "No. species", "No. early", "No. earliest", 
                    "No. outliers", "Mean no. years", "Mean no. observations"),
      align = c("l", rep("c", 5))) %>%
  kable_styling(full_width = FALSE, font_size = 11)
eo_fl_state
```


------------------------------------------------------------------------

```{r}
#| label: leaflet

# Acquire raster with forecasted AGDD anomalies (in F, with 32-deg base)
agdd_anom <- npn_download_geospatial(coverage_id = "gdd:agdd_anomaly",
                                     date = agdd_date)

# Prepare binned color palette
cpal <- colorBin(palette = cw_cols,
                 domain = agdd_anom,
                 bins = agdd_breaks,
                 na.color = "transparent")

# Create sf polygon feature with 48 states
states48v <- terra::subset(states, !states$postal %in% c("HI", "AK"))
states48v <- st_as_sf(states48v)

# Radius for comparison observations, in meters
radius_m <- radius * 1000

# Extract early observations for each phenophase in dataset
for (php in phenophase_ids) {
  assign(paste0("early", php),
         quants_r_eo %>%
           filter(early == 1 & phenophase_id == php) %>%
           left_join(select(current, site_id, lon, lat) %>% distinct, 
                     by = c("site_id")))
}
# Now we can have dataframes named: early471 (falling) an early498 (colored)

# Map observations that are earlier than 95% of all previous first-of-the-year 
# observations (and show radius used to delineate area for comparison)
map <- leaflet(states48v) %>%
  addRasterImage(agdd_anom, colors = cpal, opacity = 0.6) %>%
  addPolygons(data = states48v, color = "gray", weight = 1, fill = FALSE) %>%
  addLegend("bottomright", pal = cpal, values = ~agdd_breaks,
            title = "AGDD anomaly", opacity = 1,
            labFormat = labelFormat(prefix = c("Cool (", "Normal (", "Warm ("),
                                    suffix = ")"))
for (i in 1:nrow(php_df)) {
  early_sub <- get(paste0("early", php_df$id[i]))
  map <- map %>%
    addCircleMarkers(data = early_sub, lng = ~lon, lat = ~lat, 
                     group = php_df$title[i], color = php_df$col[i],
                     radius = 3, fillOpacity = 1,
                     popup = ~paste0(common_name, "<br>", 
                                     "ID: ", str_split_fixed(indiv, "_", 2), 
                                     "<br>", 
                                     "Day of year: ", first_yes)) %>%
    addCircles(data = early_sub, lng = ~lon, lat = ~lat, radius = radius_m,
               color = php_df$col[i], weight = 1, fill = FALSE,
               group = php_df$title[i])
}
map <- map %>%
  addLayersControl(overlayGroups = php_df$title[php_df$id %in% phenophase_ids],
                   options = layersControlOptions(collapsed = FALSE), 
                   position = "bottomleft")
```

```{r}
#| label: fig-map
#| fig-cap: !expr glue::glue("Map of early phenological observations in autumn. Yellow dots denote early observations of colored leaves, and purple dots denote early observations of falling leaves. Circles delineate the areas containing plants observed in prior years that were used for comparison. Blue shading indicates areas that were cooler than normal as of {agdd_date} (>{abs(agdd_breaks[2])} deg F below 30-year normals for accumulated growing degree days with 32 deg F base); orange shading indicates areas that were warmer than normal as of {agdd_date} (>{agdd_breaks[3]} deg F above 30-year normals). Clicking on an icon will display the species name, individual plant ID, and day of first yes.")

map
```

------------------------------------------------------------------------

```{r}
#| label: tbl-colored-leaves
#| include: !expr include_498
#| tbl-cap: !expr glue::glue("Anomalous observations of colored leaves. ID = individual plant identification number. No. Prior Obs. (Yrs) lists the number of {min(prior_years)}-{max(prior_years)} observations (with the associated number of years) that were used to determine whether a {year} observation was anomalous or not.")

outtable498 <- eo_table %>%
  filter(phenophase_id == 498) %>%
  select(-c(phenophase_id, phenophase)) %>%
  mutate(firstyes = as.Date(firstyes)) %>%
  mutate(lat = round(lat, 2),
         lon = round(lon, 2),
         numprior = paste0(n_obs_r, " (", n_yrs_r, ")")) %>%
  select(-c(n_obs_r, n_yrs_r)) %>%
  kbl(col.names = c("Species", "Functional type", "ID",
                    "State", "Lat", "Lon", "Elev (m)",
                    "Date", "Early", "Earliest", "Outlier", 
                    "No. Prior Obs. (Yrs)"),
      align = c("l", rep("c", 11))) %>%
  kable_styling(full_width = FALSE, font_size = 11)
outtable498
```

```{r}
#| label: tbl-falling-leaves
#| include: !expr include_471
#| tbl-cap: !expr glue::glue("Anomalous observations of fallling leaves. ID = individual plant identification number. No. Prior Obs. (Yrs) lists the number of {min(prior_years)}-{max(prior_years)} observations (with the associated number of years) that were used to determine whether a {year} observation was anomalous or not.")

outtable471 <- eo_table %>%
  filter(phenophase_id == 471) %>%
  select(-c(phenophase_id, phenophase)) %>%
  mutate(firstyes = as.Date(firstyes)) %>%
  mutate(lat = round(lat, 2),
         lon = round(lon, 2),
         numprior = paste0(n_obs_r, " (", n_yrs_r, ")")) %>%
  select(-c(n_obs_r, n_yrs_r)) %>%
  kbl(col.names = c("Species", "Functional type", "ID",
                    "State", "Lat", "Lon", "Elev (m)",
                    "Date", "Early", "Earliest", "Outlier", 
                    "No. Prior Obs. (Yrs)"),
    align = c("l", rep("c", 11))) %>%
  kable_styling(full_width = FALSE, font_size = 11)
outtable471
```

------------------------------------------------------------------------

```{r}
#| label: fig-dimensions
#| include: false

npanel498 <- n_distinct(prior_plot_r$panel[prior_plot_r$phenophase_id == 498])
npanel471 <- n_distinct(prior_plot_r$panel[prior_plot_r$phenophase_id == 471])
npanels <- c(npanel498, npanel471)
hist_width <- 15
hist_heights <- 2.25 * ceiling(npanels / 2)
# Change any figure heights that are 0 to 1 (won't matter since a height of 0 is only # associated with phenophase classes that weren't evaluated)
hist_heights[hist_heights == 0] <- 1
```

```{r, fig.width = hist_width, fig.height = hist_heights[1]}
#| label: fig-hists498
#| eval: !expr include_498
#| include: !expr include_498
#| fig-cap: !expr glue::glue("Colored leaves. Distributions of first-of-season observations in {min(prior_years)}-{max(prior_years)} that were used to assess whether a {year} observation (red vertical line) was unusually early.")

plot_r_498
```

```{r, fig.width = hist_width, fig.height = hist_heights[2]}
#| label: fig-hists471
#| eval: !expr include_471
#| include: !expr include_471
#| fig-cap: !expr glue::glue("Falling leaves. Distributions of first-of-season observations in {min(prior_years)}-{max(prior_years)} that were used to assess whether a {year} observation (red vertical line) was unusually early.")

plot_r_471
```
